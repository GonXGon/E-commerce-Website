

----- File: App.js -----

import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';

import Header from './Components/Header/Header';
import Footer from './Components/Footer/Footer';

import Home from './Pages/Home/Home';
import Signup from './Pages/User/SignUp/Signup';
import Login from './Pages/User/Login/Login';
import Admin from './Pages/User/Admin/Admin';
import ProductPage from './Pages/Product/ProductPage/ProductPage';
import Cartpage from './Pages/Cart/Cartpage';

function App() {
  return (
    <Router>
    <div className="App">
      <Header />
      <main>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/products" element={<ProductPage />} />
          <Route path="/signup" element={<Signup />} />
          <Route path="/login" element={<Login />} />
          <Route path="/cart" element={<Cartpage />} />
          <Route path="/admin" element={<Admin />} />
        </Routes>
      </main>
      <Footer />
    </div>
  </Router>
  );
}

export default App;


----- File: Components\Footer\Footer.css -----

.footer-container{
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background-color: rgb(184, 184, 252);
    border: 2px solid black;
}
.footer-container li{
    list-style: none;
    cursor: pointer;
}
.footer-container a{
    text-decoration: none;
    color: black;
}
.headline-container{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: start;
    width: 25%;
}
.social-conatiner{
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    justify-content: start;
    align-items: center;
    width: 25%;
}
.email-container{
    display: flex;
    flex-direction: row;
    justify-content: start;
    align-items: center;
    gap: 1.5rem;
    width: 25%;
}
.footer-items{
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    justify-content: start;
    align-items: start;
    width: 25%;
}

----- File: Components\Footer\Footer.jsx -----

import React from 'react';
import { Link } from 'react-router-dom';
import './Footer.css';

const Footer = () => {
    return(
        <div className="footer-container">
            <div className="headline-container">
                <h2>Logo</h2>
                <h2>Compeling Headline </h2>
            </div>
            <div className="social-conatiner">
                <h2>Socials</h2>
                <li>Facebook</li>
                <li>Instagram</li>
                <li>Youtube</li>
            </div>
            <div className="email-container">
                <h2>Email</h2>
                <li>Shubhambanyal64@gmail.com</li>
            </div>
            <div className="footer-items">
                <li><Link to="/">Home</Link></li>
                <li><Link to="/product">Products</Link></li>
                <li><Link to="/signup">Sign-Up</Link></li>
            </div>
        </div>
    )
}

export default Footer

----- File: Components\Header\Header.css -----

*{
    margin: 0;
}
.header-container{
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background-color: rgb(184, 184, 252);
    border: 2px solid black;
}
.logo-container{
    display: flex;
    width: 75%;
}
.header-items{
    display: grid;
    grid-template-columns: repeat(3 , 1fr);
    justify-content: center;
    align-items: center;
    width: 25%;
}
.header-items li{
    list-style: none;
    cursor: pointer;    
    text-decoration: none;
}
.header-items a{ 
    text-decoration: none;
    color: black;
}
.button-container{
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
}
.user-dropdown{ 
    display: flex;
    flex-direction: column;
    gap: .5rem;
}
.user-dropdown button{ 
    background-color: rgb(184, 184, 252);
    width: 100%;
}
.dropdown-menu{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: start;
    gap: .5rem;
}


----- File: Components\Header\Header.jsx -----

import React, { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import './Header.css';
import { useSelector, useDispatch } from 'react-redux';
import { updateItem } from '../../Features/headerSlice';
import { fetchCart, clearCart } from '../../Features/cartSlice';


const Header = () => {
    const headerItems = useSelector((state) => state.header.items);
    const [isDropdownOpen, setIsDropdownOpen] = useState(false);
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const token = localStorage.getItem('token');

    useEffect(() => {
        const storedUser = JSON.parse(localStorage.getItem('user'));
        if(token){
            dispatch(fetchCart());
        }
        if (storedUser && token) {
            dispatch(updateItem({
                id: 3,
                label: `${storedUser.firstname} ${storedUser.lastname}`,
                link: '/profile'
            }));
        } else {
            dispatch(updateItem({
                id: 3,
                label: 'Sign-Up',
                link: '/signup'
            }));
        }
    }, [dispatch, token]);

    const handleLogout = () => {
        localStorage.removeItem('user');
        localStorage.removeItem('token');
        dispatch(updateItem({
            id: 3,
            label: 'Sign-Up',
            link: '/signup'
        }));
        dispatch(clearCart());
        alert('Logged out successfully');
        navigate('/');
    };

    const handleCart = () => {
        navigate('/cart');
    }

    const handleAdmin = () => {
        navigate('/admin');
    }

    const toggleDropdown = () => {
        setIsDropdownOpen((prev) => !prev);
    };

    return (
        <div className="header-container">
            <div className="logo-container">
                <h3>Logo</h3>
            </div>
            <div className="header-items">
                {headerItems.map((item, index) => (
                    <React.Fragment key={index}>
                        {token && index === 2 ? (  
                            <div className="user-dropdown">
                                <Link to="#" className="header-item" onClick={toggleDropdown}>
                                    {item.label}
                                </Link>
                                {isDropdownOpen && (
                                    <div className="dropdown-menu">
                                        <button onClick={handleLogout}>Logout</button>
                                        <button onClick={handleCart}>Cart</button>
                                        <button onClick={handleAdmin}>Admin</button>
                                        <button >Profile</button>
                                    </div>
                                )}
                            </div>
                        ) : (
                            <Link key={index} to={item.link} className="header-item">
                                {item.label}
                            </Link>
                        )}
                    </React.Fragment>
                ))}
            </div>
        </div>
    );
};

export default Header;


----- File: Components\HeaderSection\Hero.css -----

.hero-container{
    display: flex;
    flex-direction: column;
    background-color: beige;
    height: 50vh;
}
.heroContent-container{
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    padding: 1rem;
}
.heroText-container{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: start;
    gap: 1rem;
}
.image-container{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}
.heroText-container button{
    background-color: #4CAF50;
    padding: 0.5rem;
}

----- File: Components\HeaderSection\Hero.jsx -----

import React from 'react';
import './Hero.css';

const Hero = () => {
    return(
        <div className="hero-container">
            <div className="heroContent-container">
                <div className="heroText-container">
                    <h3>Deal of a product</h3>
                    <h2>Compelling Headline</h2>
                    <h3>Detail of product</h3>
                    <button>Buy Now!!</button>
                </div>
                <div className="image-container">
                    <h1>Image</h1>
                </div>
            </div>
        </div>
    )
}

export default Hero

----- File: Components\ProductHome\ProductHome.css -----

.ProductHome-container{
    display: flex;
    flex-direction: column;
    background-color: rgb(119, 119, 108);
    padding: 2rem;
    height: 50vh;
}
.headingText-container{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}
.productPreview-container{
    display: flex;
    flex-direction: column;
    justify-content: start;
    align-items: center;
}
.productPreview-container button{
    padding: .5rem;
    width: 10%;
}

----- File: Components\ProductHome\ProductHome.jsx -----

import React from 'react';
import "./ProductHome.css";

const ProductHome = () => {
    return (
        <div className="ProductHome-container">
            <div className="headingText-container">
                <h1>Our Products</h1>
            </div>
            <div className="productPreview-container">
                <h3>Image</h3>
                <h3>Name</h3>
                <h3>Price</h3>
                <button>Buy</button>
                <button>Add to Cart</button>
            </div>
        </div>
    )
}

export default ProductHome

----- File: Features\cartSlice.js -----

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

export const fetchCart = createAsyncThunk('cart/fetchCart', async (_, { getState }) => {
    const token = localStorage.getItem('token');
    try {
        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}cart`, {
            method: 'GET',
            headers: {
                Authorization: `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error('Error fetching cart');
        }

        const data = await response.json();
        return data; // Return the parsed JSON data from the response
    } catch (error) {
        console.error('Error fetching cart:', error);
        throw error; // Rethrow the error so it can be handled by createAsyncThunk
    }
});

const initialState = {
    items: [],
};

const cartSlice = createSlice({
    name: 'cart',
    initialState,
    reducers: {
        addtoCart: (state, action) => {
            const itemIndex = state.items.findIndex((item) => item.productId === action.payload.productId);
            if (itemIndex >= 0) {
                state.items[itemIndex].quantity += action.payload.quantity;
            } else {
                state.items.push({ ...action.payload, quantity: 1 });
            }
        },
        removeCart: (state, action) => {
            state.items = state.items.filter((item) => item.productId !== action.payload);
        },
        updateCartQuantity: (state, action) => {
            const { productId, quantity } = action.payload;
            const item = state.items.find((item) => item.productId === productId);
            if (item) {
                item.quantity = quantity;
            }
        },
        clearCart: (state) => {
            state.items = [];
        },
    },
    extraReducers: (builder) => {
        builder.addCase(fetchCart.fulfilled, (state, action) => {
            state.items = action.payload.items.map(item => ({
                ...item,
                productId: item.productId._id || item.productId
            }));
            state.total = action.payload.total;
        });
    },
});

export const { addtoCart, removeCart, updateCartQuantity, clearCart } = cartSlice.actions;

export default cartSlice.reducer;


----- File: Features\headerSlice.js -----

import { createSlice } from "@reduxjs/toolkit";

const initialState = { 
    items: [
        {id: 1, label: 'Home', link: '/'},
        {id: 2, label: 'Products', link: '/products'},
        {id: 3, label: 'Sign-Up', link: '/signup'},
    ],
};

const headerSlice = createSlice({
    name: 'header',
    initialState, 
    reducers: {
        addItem: (state, action) => {
            state.items.push(action.payload);
        },
        removeItem: (state, action) => {
            state.items = state.items.filter(item => item.id !== action.payload);
        },
        updateItem: (state, action) => {
            const { id, label, link } = action.payload;
            const itemIndex = state.items.findIndex(item => item.id === id);
            if (itemIndex !== -1) {
                state.items[itemIndex].label = label;
                state.items[itemIndex].link = link;
            }
        },
    },
});

export const { addItem, removeItem, updateItem } = headerSlice.actions;

export default headerSlice.reducer;


----- File: index.css -----

body { /* Apply to the entire page */
  font-family: 'Ubuntu', sans-serif; 
}

h1, h2, h3 { /* Apply to headings */
  font-family: 'Ubuntu', sans-serif;
}

.my-custom-class { /* Apply to a specific class */
  font-family: 'Ubuntu', sans-serif;
}

.App {
  display: flex;
  flex-direction: column;
  min-height: 100vh; /* Takes up the entire height of the viewport */
}
body {
  margin: 0;
}
main {
  flex: 1; /* This ensures the main content takes up the remaining space between header and footer */
}

.footers {
  flex-shrink: 0; /* Prevents the footer from shrinking */
}


----- File: index.js -----

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';
import { Provider } from 'react-redux';
import { store } from "./Redux/Store";

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <Provider store={store}>
    <App />
  </Provider>
);


----- File: Pages\Cart\Cart.css -----

.cart-section{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}
.cart-details-section{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: .5rem;
}
.details{
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    justify-content: center;
    align-items: center;
    gap: 1rem;
    border: 2px solid black;
    border-radius: .5rem;
    padding: .5rem;
}
.details img{
    width: 150px;
    height: 150px;
    object-fit: cover; 
    border-radius: .5rem;
}
.button-container {
    display: flex;
    justify-content: center;
    align-items: center;
    grid-column: span 4;
}
.cart-details-section input{
    padding: 1rem;
}
.cart-details-section button{
    padding: 1rem;
}

----- File: Pages\Cart\Cartpage.jsx -----

import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { removeCart, updateCartQuantity } from '../../Features/cartSlice';
import { Link } from 'react-router-dom';
import "./Cart.css";

const Cartpage = () => {
    const dispatch = useDispatch();
    const cartItems = useSelector((state) => state.cart.items);

    const handleRemove = async (product) => {
        const token = localStorage.getItem('token');
        const productId = product._id ? product._id : product;

        if (!token || !productId) {
            console.error("Missing token or productId");
            return;
        }

        try {
            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}cart/${productId}`, {
                method: 'DELETE',
                headers: { 
                    Authorization: `Bearer ${token}` 
                }
            });

            if (!response.ok) {
                throw new Error('Error removing product from cart');
            }

            // After the backend removes the item, update the Redux state
            dispatch(removeCart(productId));
        } catch (error) {
            console.error("Error removing from cart:", error);
        }
    };

    const handleQuantityChange = async (productId, quantity) => {
        const token = localStorage.getItem('token');
        if (!token) {
            console.error("Missing token");
            return;
        }

        try {
            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}cart/quantity`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${token}`
                },
                body: JSON.stringify({
                    productId,
                    quantity
                })
            });

            if (!response.ok) {
                throw new Error('Error updating cart quantity');
            }

            dispatch(updateCartQuantity({ productId, quantity }));
        } catch (error) {
            console.error("Error updating cart quantity:", error);
        }
    };

    const totalPrice = cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);

    return (
        <div className='cart-section'>
            <h1>Your Cart</h1>
            {cartItems.length === 0 ? (
                <p>Your cart is empty.</p>
            ) : (
                <div className='cart-details-section'>
                    {cartItems.map((item) => (
                        <div key={item.productId} className='details'>
                            <img src={`${process.env.REACT_APP_BACKEND_URL}${item.img}`} alt={item.name} />
                            <h3>{item.name}</h3>
                            <p>Price: ${item.price}</p>
                            <p>Quantity:{" "}
                                <input
                                    type="number"
                                    value={item.quantity}
                                    onChange={(e) =>
                                        handleQuantityChange(item.productId, Number(e.target.value))
                                    }
                                />
                            </p>
                            <div className="button-container">
                                <button onClick={() => handleRemove(item.productId)}>Remove</button>
                            </div>
                        </div>
                    ))}
                    <h2>Total Price: ${totalPrice.toFixed(2)}</h2>
                    <Link to="/checkout">
                        <button>Proceed to Checkout</button>
                    </Link>
                </div>
            )}
        </div>
    );
};

export default Cartpage;


----- File: Pages\Home\Home.css -----

.Home-container{
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    padding: 1rem;
    border: 2px solid blue;
}

----- File: Pages\Home\Home.jsx -----

import React from 'react';
import Hero from '../../Components/HeaderSection/Hero';
import ProductHome from '../../Components/ProductHome/ProductHome';
import './Home.css';


const Home = () => {
    return(
        <div classname="Home-container">
            <div className="heroSection">
                <Hero />
            </div>
            <div className="productHome">
                <ProductHome />
            </div>
        </div>
    )
}

export default Home

----- File: Pages\Product\Product.css -----

.products-container{
    display: grid;
    grid-template-columns: repeat(3, 1fr);
}
.product-card{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 1rem;
    text-align: center;
    gap: .5rem;
    background-color: beige;
    margin: .5rem;
    border-radius: .5rem;
}
.product-card img{
    width: 250px;
    height: 250px;
    object-fit: cover; 
    border-radius: .5rem;
}
.button-container{
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 2rem;
}
.product-card button{
    padding: 1rem;
    width: 5rem;
}

----- File: Pages\Product\ProductPage\ProductPage.jsx -----

import React, { useState, useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { addtoCart } from '../../../Features/cartSlice';
import "../Product.css";

const ProductPage = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const dispatch = useDispatch();

    useEffect(() => {
        fetch(`${process.env.REACT_APP_BACKEND_URL}products`)
            .then(response => response.json())
            .then(data => {
                setProducts(data);
                setLoading(false);
            })
            .catch(error => {
                console.error("Error fetching products:", error);
                setLoading(false);
            });
    }, []);

    const handleAddToCart = async (product) => {
        const token = localStorage.getItem('token'); 

        if (!token) {
            alert("You need to log in to add items to the cart.");
            return;
        }

        try {
            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}cart`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${token}`
                },
                body: JSON.stringify({
                    productId: product._id,
                    name: product.name,
                    price: product.price,
                    quantity: 1,
                    img: product.img 
                })
            });

            if (!response.ok) {
                throw new Error('Error adding product to cart');
            }

            // const result = await response.json();

            dispatch(addtoCart({
                productId: product._id,
                name: product.name,
                price: product.price,
                quantity: 1,
                img: product.img 
            }));

        } catch (error) {
            console.error("Error adding to cart:", error);
            if (error.message === 'Unauthorized') {
                alert("Unauthorized! Please log in again.");
            }
        }
    };

    if (loading) {
        return <div>Loading...</div>;
    }

    return (
        <div className="products-container">
            {products.map(product => (
                <div key={product._id} className="product-card">
                    {product.img && (
                        <img src={`${process.env.REACT_APP_BACKEND_URL}${product.img}`} alt={product.name} />
                    )}
                    <h2>{product.name}</h2>
                    <p>{product.description}</p>
                    <p>Price: ${product.price}</p>
                    <p>Category: {product.category}</p>
                    <div className="button-container">
                        <button onClick={() => handleAddToCart(product)}>Add to cart</button>
                        <button>Buy now</button>
                        <button>Add to wishlist</button>
                    </div>
                </div>
            ))}
        </div>
    );
}

export default ProductPage;


----- File: Pages\User\Admin\Admin.css -----

.admin-container{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}
.form-container{
    display: flex;
    flex-direction: column;
    gap: .5rem;
    width: 50%;
}
.form-container input{
    padding: .5rem;
}
.form-container button{
    padding: .5rem;
}

----- File: Pages\User\Admin\Admin.jsx -----

import React, { useState } from 'react';
import "./Admin.css";

const Admin = () => {
    const [formData, setFormData] = useState({
        name: '',
        price: '',
        quantity: '',
        category: '',
        description: '',
        image: null
    });

    const handleChange = (e) => {
        const { name, value, files } = e.target;
        if (name === 'image') {
            setFormData({ ...formData, [name]: files[0] });
        } else {
            setFormData({ ...formData, [name]: value });
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        const data = new FormData();
        data.append('name', formData.name);
        data.append('price', formData.price);
        data.append('quantity', formData.quantity);
        data.append('category', formData.category);
        data.append('description', formData.description);
        data.append('image', formData.image);

        try {
            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}products`, {
                method: 'POST',
                body: data,
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const result = await response.json();
            // Handle success
            alert('Product added successfully!');
            setFormData({
                name: '',
                price: '',
                quantity: '',
                category: '',
                description: '',
                image: null
            });
            console.log('Product added:', result);
        } catch (error) {
            console.error('Error adding product:', error);
        }
    };

    return (
        <div className="admin-container">
            <h1>Admin Dashboard</h1>
            <form className='form-container' onSubmit={handleSubmit}>
                <label>Name</label>
                <input type="text" name="name" required value={formData.name} onChange={handleChange} />

                <label>Price</label>
                <input type="number" name="price" required value={formData.price} onChange={handleChange} />

                <label>Available Quantity</label>
                <input type="number" name="quantity" required value={formData.quantity} onChange={handleChange} />

                <label>Category</label>
                <input type="text" name="category" required value={formData.category} onChange={handleChange} />

                <label>Description</label>
                <input type="text" name="description" required value={formData.description} onChange={handleChange} />

                <label>Image</label>
                <input type="file" name="image" required onChange={handleChange} />

                <button type="submit">Add Product</button>
            </form>
        </div>
    );
};

export default Admin;


----- File: Pages\User\Login\Login.css -----

.login-container{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    padding: 2rem;
}
.login-form{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    gap: .5rem;
    width: 50%;
}
.loginbutton-container{
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
}
.login-form input{
    padding: .5rem;
    width: 50%;
}
.login-form button{
    padding: .5rem;
}

----- File: Pages\User\Login\Login.jsx -----

import React, {useState} from 'react';
import { Link, useNavigate } from 'react-router-dom';
import "./Login.css";


const Login = () => {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        try{
            const user = {
                email,
                password
            }
            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}login`,{
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(user)
            });
            const data = await response.json();
            console.log(data);
            if(response.ok){
                localStorage.setItem("token", data.token);
                localStorage.setItem("user", JSON.stringify({ firstname: data.user.firstname, lastname: data.user.lastname }));
                alert("Login successful");
                setEmail("");
                setPassword("");
                navigate('/');
            }else{
                alert("Login failed");
                console.log("Login failed:", data);
            }
        }catch(error){
            console.log("Error: ", error);
        }
    }

    return(
        <div className="login-container">
            <h1>Log In</h1>
            <form className="login-form" onSubmit={handleSubmit}>
                <label>Email:</label>
                <input type="email" name="email" value={email} onChange={(e) => setEmail(e.target.value)} required/>
                <label>Password:</label>
                <input type="password" name="password" value={password} onChange={(e) => setPassword(e.target.value)} required/>
                <div className='loginbutton-container'>
                    <button type="submit">Log In</button> 
                </div>
            </form>
            <p>Need to Sign Up? <Link to="/signup">Sign Up</Link></p>
        </div>
    )
}

export default Login

----- File: Pages\User\SignUp\Signup.css -----

.signup-container{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    padding: 2rem;
}
.signup-form{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    gap: .5rem;
    width: 50%;
}
.button-container{
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
}
.signup-form input{
    padding: .5rem;
    width: 50%;
}
.signup-form button{
    padding: .5rem;
}

----- File: Pages\User\SignUp\Signup.jsx -----

import React,{useState} from 'react';
import "./Signup.css";
import { Link, useNavigate } from 'react-router-dom';

const Signup = () => {
    const [firstName, setfirstName] = useState("");
    const [lastName, setlastName] = useState("");
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        const userData = {
            firstname: firstName,
            lastname: lastName,   
            email,
            password
        };
        try{
            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}signup`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(userData)
            });
            if(response.ok){
                setEmail("");
                setPassword("");
                setfirstName("");
                setlastName("");
                alert("User created Successfully")
                navigateLogin();
            }else{
                alert("Something went wrong");
            }
            
        }catch(error){
            console.error('Error:', error);
        }
    };
    const navigateLogin = () => {
        navigate('/login');
    }

    return(
        <div className="signup-container">
            <h1>Sign Up</h1>
            <form className="signup-form" onSubmit={handleSubmit}>
                <label>First Name:</label>
                <input type="text" name="firstname" value={firstName} onChange={(e) => setfirstName(e.target.value)} required/>
                <label>Last Name:</label>
                <input type="text" name="lastname" value={lastName} onChange={(e) => setlastName(e.target.value)} required/>
                <label>Email:</label>
                <input type="email" name="email" value={email} onChange={(e) => setEmail(e.target.value)} required/>
                <label>Password:</label>
                <input type="password" name="password" value={password} onChange={(e) => setPassword(e.target.value)} required/>
                <div className='button-container'>
                    <button type="submit">Sign Up</button> 
                </div>
            </form>
            <p>Already have an account? <Link to="/login">Login</Link></p>
        </div>
    )
}

export default Signup

----- File: projectToText.js -----

const fs = require('fs');
const path = require('path');

// Directory you want to read
const projectDir = path.resolve(__dirname); // current directory
const outputFilePath = path.join(__dirname, 'project-context.txt');

// Define which file extensions to include
const includeExtensions = ['.js', '.jsx', '.json', '.css', '.html', '.md', '.txt'];

// Recursive function to read files and directories
function readDirectory(directory) {
  const fileList = [];
  const items = fs.readdirSync(directory);

  items.forEach(item => {
    const fullPath = path.join(directory, item);
    const stat = fs.statSync(fullPath);

    if (stat.isDirectory()) {
      fileList.push(...readDirectory(fullPath)); // Recursively add files from subfolders
    } else {
      if (includeExtensions.includes(path.extname(fullPath))) {
        fileList.push(fullPath); // Only include files with specific extensions
      }
    }
  });

  return fileList;
}

// Main function to gather content
function gatherProjectContent() {
  const files = readDirectory(projectDir);

  let outputContent = '';

  files.forEach(file => {
    const content = fs.readFileSync(file, 'utf-8');
    const relativePath = path.relative(projectDir, file);
    outputContent += `\n\n----- File: ${relativePath} -----\n\n`;
    outputContent += content;
  });

  fs.writeFileSync(outputFilePath, outputContent);
  console.log(`Project content saved to ${outputFilePath}`);
}

// Run the function
gatherProjectContent();


----- File: Redux\Store.js -----

import { configureStore } from "@reduxjs/toolkit";
import headerReducer from '../Features/headerSlice';
import cartReducer from '../Features/cartSlice';

export const store = configureStore({
    reducer: {
        header: headerReducer,
        cart: cartReducer,
    },
});

export default store;